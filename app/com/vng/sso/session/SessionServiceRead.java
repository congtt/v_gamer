/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.vng.sso.session;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SessionServiceRead {

  public interface Iface {

    public SessionResult GetSession(String sessionId) throws org.apache.thrift.TException;

    public SessionResult GetSessionWithCheckIP(String sessionId, String clientIp) throws org.apache.thrift.TException;

    public SessionResult GetSessionWithCheckIPBrowser(String sessionId, String clientIp, String useragent) throws org.apache.thrift.TException;

    public SessionResult GetSessionWithCheckBrowser(String sessionId, String useragent) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void GetSession(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetSessionWithCheckIP(String sessionId, String clientIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetSessionWithCheckIPBrowser(String sessionId, String clientIp, String useragent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetSessionWithCheckBrowser(String sessionId, String useragent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public SessionResult GetSession(String sessionId) throws org.apache.thrift.TException
    {
      send_GetSession(sessionId);
      return recv_GetSession();
    }

    public void send_GetSession(String sessionId) throws org.apache.thrift.TException
    {
      GetSession_args args = new GetSession_args();
      args.setSessionId(sessionId);
      sendBase("GetSession", args);
    }

    public SessionResult recv_GetSession() throws org.apache.thrift.TException
    {
      GetSession_result result = new GetSession_result();
      receiveBase(result, "GetSession");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSession failed: unknown result");
    }

    public SessionResult GetSessionWithCheckIP(String sessionId, String clientIp) throws org.apache.thrift.TException
    {
      send_GetSessionWithCheckIP(sessionId, clientIp);
      return recv_GetSessionWithCheckIP();
    }

    public void send_GetSessionWithCheckIP(String sessionId, String clientIp) throws org.apache.thrift.TException
    {
      GetSessionWithCheckIP_args args = new GetSessionWithCheckIP_args();
      args.setSessionId(sessionId);
      args.setClientIp(clientIp);
      sendBase("GetSessionWithCheckIP", args);
    }

    public SessionResult recv_GetSessionWithCheckIP() throws org.apache.thrift.TException
    {
      GetSessionWithCheckIP_result result = new GetSessionWithCheckIP_result();
      receiveBase(result, "GetSessionWithCheckIP");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSessionWithCheckIP failed: unknown result");
    }

    public SessionResult GetSessionWithCheckIPBrowser(String sessionId, String clientIp, String useragent) throws org.apache.thrift.TException
    {
      send_GetSessionWithCheckIPBrowser(sessionId, clientIp, useragent);
      return recv_GetSessionWithCheckIPBrowser();
    }

    public void send_GetSessionWithCheckIPBrowser(String sessionId, String clientIp, String useragent) throws org.apache.thrift.TException
    {
      GetSessionWithCheckIPBrowser_args args = new GetSessionWithCheckIPBrowser_args();
      args.setSessionId(sessionId);
      args.setClientIp(clientIp);
      args.setUseragent(useragent);
      sendBase("GetSessionWithCheckIPBrowser", args);
    }

    public SessionResult recv_GetSessionWithCheckIPBrowser() throws org.apache.thrift.TException
    {
      GetSessionWithCheckIPBrowser_result result = new GetSessionWithCheckIPBrowser_result();
      receiveBase(result, "GetSessionWithCheckIPBrowser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSessionWithCheckIPBrowser failed: unknown result");
    }

    public SessionResult GetSessionWithCheckBrowser(String sessionId, String useragent) throws org.apache.thrift.TException
    {
      send_GetSessionWithCheckBrowser(sessionId, useragent);
      return recv_GetSessionWithCheckBrowser();
    }

    public void send_GetSessionWithCheckBrowser(String sessionId, String useragent) throws org.apache.thrift.TException
    {
      GetSessionWithCheckBrowser_args args = new GetSessionWithCheckBrowser_args();
      args.setSessionId(sessionId);
      args.setUseragent(useragent);
      sendBase("GetSessionWithCheckBrowser", args);
    }

    public SessionResult recv_GetSessionWithCheckBrowser() throws org.apache.thrift.TException
    {
      GetSessionWithCheckBrowser_result result = new GetSessionWithCheckBrowser_result();
      receiveBase(result, "GetSessionWithCheckBrowser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSessionWithCheckBrowser failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void GetSession(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSession_call method_call = new GetSession_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSession_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      public GetSession_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSession", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSession_args args = new GetSession_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SessionResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSession();
      }
    }

    public void GetSessionWithCheckIP(String sessionId, String clientIp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSessionWithCheckIP_call method_call = new GetSessionWithCheckIP_call(sessionId, clientIp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSessionWithCheckIP_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String clientIp;
      public GetSessionWithCheckIP_call(String sessionId, String clientIp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.clientIp = clientIp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSessionWithCheckIP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSessionWithCheckIP_args args = new GetSessionWithCheckIP_args();
        args.setSessionId(sessionId);
        args.setClientIp(clientIp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SessionResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSessionWithCheckIP();
      }
    }

    public void GetSessionWithCheckIPBrowser(String sessionId, String clientIp, String useragent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSessionWithCheckIPBrowser_call method_call = new GetSessionWithCheckIPBrowser_call(sessionId, clientIp, useragent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSessionWithCheckIPBrowser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String clientIp;
      private String useragent;
      public GetSessionWithCheckIPBrowser_call(String sessionId, String clientIp, String useragent, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.clientIp = clientIp;
        this.useragent = useragent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSessionWithCheckIPBrowser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSessionWithCheckIPBrowser_args args = new GetSessionWithCheckIPBrowser_args();
        args.setSessionId(sessionId);
        args.setClientIp(clientIp);
        args.setUseragent(useragent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SessionResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSessionWithCheckIPBrowser();
      }
    }

    public void GetSessionWithCheckBrowser(String sessionId, String useragent, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSessionWithCheckBrowser_call method_call = new GetSessionWithCheckBrowser_call(sessionId, useragent, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSessionWithCheckBrowser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      private String useragent;
      public GetSessionWithCheckBrowser_call(String sessionId, String useragent, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
        this.useragent = useragent;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSessionWithCheckBrowser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSessionWithCheckBrowser_args args = new GetSessionWithCheckBrowser_args();
        args.setSessionId(sessionId);
        args.setUseragent(useragent);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SessionResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSessionWithCheckBrowser();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("GetSession", new GetSession());
      processMap.put("GetSessionWithCheckIP", new GetSessionWithCheckIP());
      processMap.put("GetSessionWithCheckIPBrowser", new GetSessionWithCheckIPBrowser());
      processMap.put("GetSessionWithCheckBrowser", new GetSessionWithCheckBrowser());
      return processMap;
    }

    public static class GetSession<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSession_args> {
      public GetSession() {
        super("GetSession");
      }

      public GetSession_args getEmptyArgsInstance() {
        return new GetSession_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetSession_result getResult(I iface, GetSession_args args) throws org.apache.thrift.TException {
        GetSession_result result = new GetSession_result();
        result.success = iface.GetSession(args.sessionId);
        return result;
      }
    }

    public static class GetSessionWithCheckIP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSessionWithCheckIP_args> {
      public GetSessionWithCheckIP() {
        super("GetSessionWithCheckIP");
      }

      public GetSessionWithCheckIP_args getEmptyArgsInstance() {
        return new GetSessionWithCheckIP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetSessionWithCheckIP_result getResult(I iface, GetSessionWithCheckIP_args args) throws org.apache.thrift.TException {
        GetSessionWithCheckIP_result result = new GetSessionWithCheckIP_result();
        result.success = iface.GetSessionWithCheckIP(args.sessionId, args.clientIp);
        return result;
      }
    }

    public static class GetSessionWithCheckIPBrowser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSessionWithCheckIPBrowser_args> {
      public GetSessionWithCheckIPBrowser() {
        super("GetSessionWithCheckIPBrowser");
      }

      public GetSessionWithCheckIPBrowser_args getEmptyArgsInstance() {
        return new GetSessionWithCheckIPBrowser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetSessionWithCheckIPBrowser_result getResult(I iface, GetSessionWithCheckIPBrowser_args args) throws org.apache.thrift.TException {
        GetSessionWithCheckIPBrowser_result result = new GetSessionWithCheckIPBrowser_result();
        result.success = iface.GetSessionWithCheckIPBrowser(args.sessionId, args.clientIp, args.useragent);
        return result;
      }
    }

    public static class GetSessionWithCheckBrowser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSessionWithCheckBrowser_args> {
      public GetSessionWithCheckBrowser() {
        super("GetSessionWithCheckBrowser");
      }

      public GetSessionWithCheckBrowser_args getEmptyArgsInstance() {
        return new GetSessionWithCheckBrowser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetSessionWithCheckBrowser_result getResult(I iface, GetSessionWithCheckBrowser_args args) throws org.apache.thrift.TException {
        GetSessionWithCheckBrowser_result result = new GetSessionWithCheckBrowser_result();
        result.success = iface.GetSessionWithCheckBrowser(args.sessionId, args.useragent);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("GetSession", new GetSession());
      processMap.put("GetSessionWithCheckIP", new GetSessionWithCheckIP());
      processMap.put("GetSessionWithCheckIPBrowser", new GetSessionWithCheckIPBrowser());
      processMap.put("GetSessionWithCheckBrowser", new GetSessionWithCheckBrowser());
      return processMap;
    }

    public static class GetSession<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSession_args, SessionResult> {
      public GetSession() {
        super("GetSession");
      }

      public GetSession_args getEmptyArgsInstance() {
        return new GetSession_args();
      }

      public AsyncMethodCallback<SessionResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SessionResult>() { 
          public void onComplete(SessionResult o) {
            GetSession_result result = new GetSession_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetSession_result result = new GetSession_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSession_args args, org.apache.thrift.async.AsyncMethodCallback<SessionResult> resultHandler) throws TException {
        iface.GetSession(args.sessionId,resultHandler);
      }
    }

    public static class GetSessionWithCheckIP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSessionWithCheckIP_args, SessionResult> {
      public GetSessionWithCheckIP() {
        super("GetSessionWithCheckIP");
      }

      public GetSessionWithCheckIP_args getEmptyArgsInstance() {
        return new GetSessionWithCheckIP_args();
      }

      public AsyncMethodCallback<SessionResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SessionResult>() { 
          public void onComplete(SessionResult o) {
            GetSessionWithCheckIP_result result = new GetSessionWithCheckIP_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetSessionWithCheckIP_result result = new GetSessionWithCheckIP_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSessionWithCheckIP_args args, org.apache.thrift.async.AsyncMethodCallback<SessionResult> resultHandler) throws TException {
        iface.GetSessionWithCheckIP(args.sessionId, args.clientIp,resultHandler);
      }
    }

    public static class GetSessionWithCheckIPBrowser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSessionWithCheckIPBrowser_args, SessionResult> {
      public GetSessionWithCheckIPBrowser() {
        super("GetSessionWithCheckIPBrowser");
      }

      public GetSessionWithCheckIPBrowser_args getEmptyArgsInstance() {
        return new GetSessionWithCheckIPBrowser_args();
      }

      public AsyncMethodCallback<SessionResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SessionResult>() { 
          public void onComplete(SessionResult o) {
            GetSessionWithCheckIPBrowser_result result = new GetSessionWithCheckIPBrowser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetSessionWithCheckIPBrowser_result result = new GetSessionWithCheckIPBrowser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSessionWithCheckIPBrowser_args args, org.apache.thrift.async.AsyncMethodCallback<SessionResult> resultHandler) throws TException {
        iface.GetSessionWithCheckIPBrowser(args.sessionId, args.clientIp, args.useragent,resultHandler);
      }
    }

    public static class GetSessionWithCheckBrowser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSessionWithCheckBrowser_args, SessionResult> {
      public GetSessionWithCheckBrowser() {
        super("GetSessionWithCheckBrowser");
      }

      public GetSessionWithCheckBrowser_args getEmptyArgsInstance() {
        return new GetSessionWithCheckBrowser_args();
      }

      public AsyncMethodCallback<SessionResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SessionResult>() { 
          public void onComplete(SessionResult o) {
            GetSessionWithCheckBrowser_result result = new GetSessionWithCheckBrowser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetSessionWithCheckBrowser_result result = new GetSessionWithCheckBrowser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSessionWithCheckBrowser_args args, org.apache.thrift.async.AsyncMethodCallback<SessionResult> resultHandler) throws TException {
        iface.GetSessionWithCheckBrowser(args.sessionId, args.useragent,resultHandler);
      }
    }

  }

  public static class GetSession_args implements org.apache.thrift.TBase<GetSession_args, GetSession_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSession_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSession_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSession_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSession_argsTupleSchemeFactory());
    }

    public String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSession_args.class, metaDataMap);
    }

    public GetSession_args() {
    }

    public GetSession_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSession_args(GetSession_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public GetSession_args deepCopy() {
      return new GetSession_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public GetSession_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSession_args)
        return this.equals((GetSession_args)that);
      return false;
    }

    public boolean equals(GetSession_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSession_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSession_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSession_argsStandardSchemeFactory implements SchemeFactory {
      public GetSession_argsStandardScheme getScheme() {
        return new GetSession_argsStandardScheme();
      }
    }

    private static class GetSession_argsStandardScheme extends StandardScheme<GetSession_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSession_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSession_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSession_argsTupleSchemeFactory implements SchemeFactory {
      public GetSession_argsTupleScheme getScheme() {
        return new GetSession_argsTupleScheme();
      }
    }

    private static class GetSession_argsTupleScheme extends TupleScheme<GetSession_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSession_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class GetSession_result implements org.apache.thrift.TBase<GetSession_result, GetSession_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSession_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSession_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSession_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSession_resultTupleSchemeFactory());
    }

    public SessionResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSession_result.class, metaDataMap);
    }

    public GetSession_result() {
    }

    public GetSession_result(
      SessionResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSession_result(GetSession_result other) {
      if (other.isSetSuccess()) {
        this.success = new SessionResult(other.success);
      }
    }

    public GetSession_result deepCopy() {
      return new GetSession_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SessionResult getSuccess() {
      return this.success;
    }

    public GetSession_result setSuccess(SessionResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SessionResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSession_result)
        return this.equals((GetSession_result)that);
      return false;
    }

    public boolean equals(GetSession_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSession_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSession_resultStandardSchemeFactory implements SchemeFactory {
      public GetSession_resultStandardScheme getScheme() {
        return new GetSession_resultStandardScheme();
      }
    }

    private static class GetSession_resultStandardScheme extends StandardScheme<GetSession_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSession_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SessionResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSession_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSession_resultTupleSchemeFactory implements SchemeFactory {
      public GetSession_resultTupleScheme getScheme() {
        return new GetSession_resultTupleScheme();
      }
    }

    private static class GetSession_resultTupleScheme extends TupleScheme<GetSession_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSession_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SessionResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetSessionWithCheckIP_args implements org.apache.thrift.TBase<GetSessionWithCheckIP_args, GetSessionWithCheckIP_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSessionWithCheckIP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSessionWithCheckIP_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIp", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSessionWithCheckIP_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSessionWithCheckIP_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public String clientIp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      CLIENT_IP((short)2, "clientIp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // CLIENT_IP
            return CLIENT_IP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("clientIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSessionWithCheckIP_args.class, metaDataMap);
    }

    public GetSessionWithCheckIP_args() {
    }

    public GetSessionWithCheckIP_args(
      String sessionId,
      String clientIp)
    {
      this();
      this.sessionId = sessionId;
      this.clientIp = clientIp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSessionWithCheckIP_args(GetSessionWithCheckIP_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetClientIp()) {
        this.clientIp = other.clientIp;
      }
    }

    public GetSessionWithCheckIP_args deepCopy() {
      return new GetSessionWithCheckIP_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.clientIp = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public GetSessionWithCheckIP_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getClientIp() {
      return this.clientIp;
    }

    public GetSessionWithCheckIP_args setClientIp(String clientIp) {
      this.clientIp = clientIp;
      return this;
    }

    public void unsetClientIp() {
      this.clientIp = null;
    }

    /** Returns true if field clientIp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientIp() {
      return this.clientIp != null;
    }

    public void setClientIpIsSet(boolean value) {
      if (!value) {
        this.clientIp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case CLIENT_IP:
        if (value == null) {
          unsetClientIp();
        } else {
          setClientIp((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case CLIENT_IP:
        return getClientIp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case CLIENT_IP:
        return isSetClientIp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSessionWithCheckIP_args)
        return this.equals((GetSessionWithCheckIP_args)that);
      return false;
    }

    public boolean equals(GetSessionWithCheckIP_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_clientIp = true && this.isSetClientIp();
      boolean that_present_clientIp = true && that.isSetClientIp();
      if (this_present_clientIp || that_present_clientIp) {
        if (!(this_present_clientIp && that_present_clientIp))
          return false;
        if (!this.clientIp.equals(that.clientIp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSessionWithCheckIP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientIp()).compareTo(other.isSetClientIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIp, other.clientIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSessionWithCheckIP_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientIp:");
      if (this.clientIp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSessionWithCheckIP_argsStandardSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckIP_argsStandardScheme getScheme() {
        return new GetSessionWithCheckIP_argsStandardScheme();
      }
    }

    private static class GetSessionWithCheckIP_argsStandardScheme extends StandardScheme<GetSessionWithCheckIP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSessionWithCheckIP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientIp = iprot.readString();
                struct.setClientIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSessionWithCheckIP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.clientIp != null) {
          oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
          oprot.writeString(struct.clientIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSessionWithCheckIP_argsTupleSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckIP_argsTupleScheme getScheme() {
        return new GetSessionWithCheckIP_argsTupleScheme();
      }
    }

    private static class GetSessionWithCheckIP_argsTupleScheme extends TupleScheme<GetSessionWithCheckIP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetClientIp()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetClientIp()) {
          oprot.writeString(struct.clientIp);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckIP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientIp = iprot.readString();
          struct.setClientIpIsSet(true);
        }
      }
    }

  }

  public static class GetSessionWithCheckIP_result implements org.apache.thrift.TBase<GetSessionWithCheckIP_result, GetSessionWithCheckIP_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSessionWithCheckIP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSessionWithCheckIP_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSessionWithCheckIP_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSessionWithCheckIP_resultTupleSchemeFactory());
    }

    public SessionResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSessionWithCheckIP_result.class, metaDataMap);
    }

    public GetSessionWithCheckIP_result() {
    }

    public GetSessionWithCheckIP_result(
      SessionResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSessionWithCheckIP_result(GetSessionWithCheckIP_result other) {
      if (other.isSetSuccess()) {
        this.success = new SessionResult(other.success);
      }
    }

    public GetSessionWithCheckIP_result deepCopy() {
      return new GetSessionWithCheckIP_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SessionResult getSuccess() {
      return this.success;
    }

    public GetSessionWithCheckIP_result setSuccess(SessionResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SessionResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSessionWithCheckIP_result)
        return this.equals((GetSessionWithCheckIP_result)that);
      return false;
    }

    public boolean equals(GetSessionWithCheckIP_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSessionWithCheckIP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSessionWithCheckIP_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSessionWithCheckIP_resultStandardSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckIP_resultStandardScheme getScheme() {
        return new GetSessionWithCheckIP_resultStandardScheme();
      }
    }

    private static class GetSessionWithCheckIP_resultStandardScheme extends StandardScheme<GetSessionWithCheckIP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSessionWithCheckIP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SessionResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSessionWithCheckIP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSessionWithCheckIP_resultTupleSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckIP_resultTupleScheme getScheme() {
        return new GetSessionWithCheckIP_resultTupleScheme();
      }
    }

    private static class GetSessionWithCheckIP_resultTupleScheme extends TupleScheme<GetSessionWithCheckIP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckIP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SessionResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetSessionWithCheckIPBrowser_args implements org.apache.thrift.TBase<GetSessionWithCheckIPBrowser_args, GetSessionWithCheckIPBrowser_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSessionWithCheckIPBrowser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSessionWithCheckIPBrowser_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("clientIp", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERAGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("useragent", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSessionWithCheckIPBrowser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSessionWithCheckIPBrowser_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public String clientIp; // required
    public String useragent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      CLIENT_IP((short)2, "clientIp"),
      USERAGENT((short)3, "useragent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // CLIENT_IP
            return CLIENT_IP;
          case 3: // USERAGENT
            return USERAGENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_IP, new org.apache.thrift.meta_data.FieldMetaData("clientIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERAGENT, new org.apache.thrift.meta_data.FieldMetaData("useragent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSessionWithCheckIPBrowser_args.class, metaDataMap);
    }

    public GetSessionWithCheckIPBrowser_args() {
    }

    public GetSessionWithCheckIPBrowser_args(
      String sessionId,
      String clientIp,
      String useragent)
    {
      this();
      this.sessionId = sessionId;
      this.clientIp = clientIp;
      this.useragent = useragent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSessionWithCheckIPBrowser_args(GetSessionWithCheckIPBrowser_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetClientIp()) {
        this.clientIp = other.clientIp;
      }
      if (other.isSetUseragent()) {
        this.useragent = other.useragent;
      }
    }

    public GetSessionWithCheckIPBrowser_args deepCopy() {
      return new GetSessionWithCheckIPBrowser_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.clientIp = null;
      this.useragent = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public GetSessionWithCheckIPBrowser_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getClientIp() {
      return this.clientIp;
    }

    public GetSessionWithCheckIPBrowser_args setClientIp(String clientIp) {
      this.clientIp = clientIp;
      return this;
    }

    public void unsetClientIp() {
      this.clientIp = null;
    }

    /** Returns true if field clientIp is set (has been assigned a value) and false otherwise */
    public boolean isSetClientIp() {
      return this.clientIp != null;
    }

    public void setClientIpIsSet(boolean value) {
      if (!value) {
        this.clientIp = null;
      }
    }

    public String getUseragent() {
      return this.useragent;
    }

    public GetSessionWithCheckIPBrowser_args setUseragent(String useragent) {
      this.useragent = useragent;
      return this;
    }

    public void unsetUseragent() {
      this.useragent = null;
    }

    /** Returns true if field useragent is set (has been assigned a value) and false otherwise */
    public boolean isSetUseragent() {
      return this.useragent != null;
    }

    public void setUseragentIsSet(boolean value) {
      if (!value) {
        this.useragent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case CLIENT_IP:
        if (value == null) {
          unsetClientIp();
        } else {
          setClientIp((String)value);
        }
        break;

      case USERAGENT:
        if (value == null) {
          unsetUseragent();
        } else {
          setUseragent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case CLIENT_IP:
        return getClientIp();

      case USERAGENT:
        return getUseragent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case CLIENT_IP:
        return isSetClientIp();
      case USERAGENT:
        return isSetUseragent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSessionWithCheckIPBrowser_args)
        return this.equals((GetSessionWithCheckIPBrowser_args)that);
      return false;
    }

    public boolean equals(GetSessionWithCheckIPBrowser_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_clientIp = true && this.isSetClientIp();
      boolean that_present_clientIp = true && that.isSetClientIp();
      if (this_present_clientIp || that_present_clientIp) {
        if (!(this_present_clientIp && that_present_clientIp))
          return false;
        if (!this.clientIp.equals(that.clientIp))
          return false;
      }

      boolean this_present_useragent = true && this.isSetUseragent();
      boolean that_present_useragent = true && that.isSetUseragent();
      if (this_present_useragent || that_present_useragent) {
        if (!(this_present_useragent && that_present_useragent))
          return false;
        if (!this.useragent.equals(that.useragent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSessionWithCheckIPBrowser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientIp()).compareTo(other.isSetClientIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientIp, other.clientIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUseragent()).compareTo(other.isSetUseragent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUseragent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useragent, other.useragent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSessionWithCheckIPBrowser_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientIp:");
      if (this.clientIp == null) {
        sb.append("null");
      } else {
        sb.append(this.clientIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("useragent:");
      if (this.useragent == null) {
        sb.append("null");
      } else {
        sb.append(this.useragent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSessionWithCheckIPBrowser_argsStandardSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckIPBrowser_argsStandardScheme getScheme() {
        return new GetSessionWithCheckIPBrowser_argsStandardScheme();
      }
    }

    private static class GetSessionWithCheckIPBrowser_argsStandardScheme extends StandardScheme<GetSessionWithCheckIPBrowser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSessionWithCheckIPBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientIp = iprot.readString();
                struct.setClientIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERAGENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.useragent = iprot.readString();
                struct.setUseragentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSessionWithCheckIPBrowser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.clientIp != null) {
          oprot.writeFieldBegin(CLIENT_IP_FIELD_DESC);
          oprot.writeString(struct.clientIp);
          oprot.writeFieldEnd();
        }
        if (struct.useragent != null) {
          oprot.writeFieldBegin(USERAGENT_FIELD_DESC);
          oprot.writeString(struct.useragent);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSessionWithCheckIPBrowser_argsTupleSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckIPBrowser_argsTupleScheme getScheme() {
        return new GetSessionWithCheckIPBrowser_argsTupleScheme();
      }
    }

    private static class GetSessionWithCheckIPBrowser_argsTupleScheme extends TupleScheme<GetSessionWithCheckIPBrowser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckIPBrowser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetClientIp()) {
          optionals.set(1);
        }
        if (struct.isSetUseragent()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetClientIp()) {
          oprot.writeString(struct.clientIp);
        }
        if (struct.isSetUseragent()) {
          oprot.writeString(struct.useragent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckIPBrowser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientIp = iprot.readString();
          struct.setClientIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.useragent = iprot.readString();
          struct.setUseragentIsSet(true);
        }
      }
    }

  }

  public static class GetSessionWithCheckIPBrowser_result implements org.apache.thrift.TBase<GetSessionWithCheckIPBrowser_result, GetSessionWithCheckIPBrowser_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSessionWithCheckIPBrowser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSessionWithCheckIPBrowser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSessionWithCheckIPBrowser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSessionWithCheckIPBrowser_resultTupleSchemeFactory());
    }

    public SessionResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSessionWithCheckIPBrowser_result.class, metaDataMap);
    }

    public GetSessionWithCheckIPBrowser_result() {
    }

    public GetSessionWithCheckIPBrowser_result(
      SessionResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSessionWithCheckIPBrowser_result(GetSessionWithCheckIPBrowser_result other) {
      if (other.isSetSuccess()) {
        this.success = new SessionResult(other.success);
      }
    }

    public GetSessionWithCheckIPBrowser_result deepCopy() {
      return new GetSessionWithCheckIPBrowser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SessionResult getSuccess() {
      return this.success;
    }

    public GetSessionWithCheckIPBrowser_result setSuccess(SessionResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SessionResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSessionWithCheckIPBrowser_result)
        return this.equals((GetSessionWithCheckIPBrowser_result)that);
      return false;
    }

    public boolean equals(GetSessionWithCheckIPBrowser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSessionWithCheckIPBrowser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSessionWithCheckIPBrowser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSessionWithCheckIPBrowser_resultStandardSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckIPBrowser_resultStandardScheme getScheme() {
        return new GetSessionWithCheckIPBrowser_resultStandardScheme();
      }
    }

    private static class GetSessionWithCheckIPBrowser_resultStandardScheme extends StandardScheme<GetSessionWithCheckIPBrowser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSessionWithCheckIPBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SessionResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSessionWithCheckIPBrowser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSessionWithCheckIPBrowser_resultTupleSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckIPBrowser_resultTupleScheme getScheme() {
        return new GetSessionWithCheckIPBrowser_resultTupleScheme();
      }
    }

    private static class GetSessionWithCheckIPBrowser_resultTupleScheme extends TupleScheme<GetSessionWithCheckIPBrowser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckIPBrowser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckIPBrowser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SessionResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class GetSessionWithCheckBrowser_args implements org.apache.thrift.TBase<GetSessionWithCheckBrowser_args, GetSessionWithCheckBrowser_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSessionWithCheckBrowser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSessionWithCheckBrowser_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERAGENT_FIELD_DESC = new org.apache.thrift.protocol.TField("useragent", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSessionWithCheckBrowser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSessionWithCheckBrowser_argsTupleSchemeFactory());
    }

    public String sessionId; // required
    public String useragent; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId"),
      USERAGENT((short)2, "useragent");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // USERAGENT
            return USERAGENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERAGENT, new org.apache.thrift.meta_data.FieldMetaData("useragent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSessionWithCheckBrowser_args.class, metaDataMap);
    }

    public GetSessionWithCheckBrowser_args() {
    }

    public GetSessionWithCheckBrowser_args(
      String sessionId,
      String useragent)
    {
      this();
      this.sessionId = sessionId;
      this.useragent = useragent;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSessionWithCheckBrowser_args(GetSessionWithCheckBrowser_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetUseragent()) {
        this.useragent = other.useragent;
      }
    }

    public GetSessionWithCheckBrowser_args deepCopy() {
      return new GetSessionWithCheckBrowser_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
      this.useragent = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public GetSessionWithCheckBrowser_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getUseragent() {
      return this.useragent;
    }

    public GetSessionWithCheckBrowser_args setUseragent(String useragent) {
      this.useragent = useragent;
      return this;
    }

    public void unsetUseragent() {
      this.useragent = null;
    }

    /** Returns true if field useragent is set (has been assigned a value) and false otherwise */
    public boolean isSetUseragent() {
      return this.useragent != null;
    }

    public void setUseragentIsSet(boolean value) {
      if (!value) {
        this.useragent = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      case USERAGENT:
        if (value == null) {
          unsetUseragent();
        } else {
          setUseragent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      case USERAGENT:
        return getUseragent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      case USERAGENT:
        return isSetUseragent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSessionWithCheckBrowser_args)
        return this.equals((GetSessionWithCheckBrowser_args)that);
      return false;
    }

    public boolean equals(GetSessionWithCheckBrowser_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_useragent = true && this.isSetUseragent();
      boolean that_present_useragent = true && that.isSetUseragent();
      if (this_present_useragent || that_present_useragent) {
        if (!(this_present_useragent && that_present_useragent))
          return false;
        if (!this.useragent.equals(that.useragent))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSessionWithCheckBrowser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUseragent()).compareTo(other.isSetUseragent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUseragent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useragent, other.useragent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSessionWithCheckBrowser_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("useragent:");
      if (this.useragent == null) {
        sb.append("null");
      } else {
        sb.append(this.useragent);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSessionWithCheckBrowser_argsStandardSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckBrowser_argsStandardScheme getScheme() {
        return new GetSessionWithCheckBrowser_argsStandardScheme();
      }
    }

    private static class GetSessionWithCheckBrowser_argsStandardScheme extends StandardScheme<GetSessionWithCheckBrowser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSessionWithCheckBrowser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERAGENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.useragent = iprot.readString();
                struct.setUseragentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSessionWithCheckBrowser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.useragent != null) {
          oprot.writeFieldBegin(USERAGENT_FIELD_DESC);
          oprot.writeString(struct.useragent);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSessionWithCheckBrowser_argsTupleSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckBrowser_argsTupleScheme getScheme() {
        return new GetSessionWithCheckBrowser_argsTupleScheme();
      }
    }

    private static class GetSessionWithCheckBrowser_argsTupleScheme extends TupleScheme<GetSessionWithCheckBrowser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckBrowser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        if (struct.isSetUseragent()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetUseragent()) {
          oprot.writeString(struct.useragent);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckBrowser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.useragent = iprot.readString();
          struct.setUseragentIsSet(true);
        }
      }
    }

  }

  public static class GetSessionWithCheckBrowser_result implements org.apache.thrift.TBase<GetSessionWithCheckBrowser_result, GetSessionWithCheckBrowser_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSessionWithCheckBrowser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSessionWithCheckBrowser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSessionWithCheckBrowser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSessionWithCheckBrowser_resultTupleSchemeFactory());
    }

    public SessionResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SessionResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSessionWithCheckBrowser_result.class, metaDataMap);
    }

    public GetSessionWithCheckBrowser_result() {
    }

    public GetSessionWithCheckBrowser_result(
      SessionResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSessionWithCheckBrowser_result(GetSessionWithCheckBrowser_result other) {
      if (other.isSetSuccess()) {
        this.success = new SessionResult(other.success);
      }
    }

    public GetSessionWithCheckBrowser_result deepCopy() {
      return new GetSessionWithCheckBrowser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public SessionResult getSuccess() {
      return this.success;
    }

    public GetSessionWithCheckBrowser_result setSuccess(SessionResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SessionResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSessionWithCheckBrowser_result)
        return this.equals((GetSessionWithCheckBrowser_result)that);
      return false;
    }

    public boolean equals(GetSessionWithCheckBrowser_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSessionWithCheckBrowser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSessionWithCheckBrowser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSessionWithCheckBrowser_resultStandardSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckBrowser_resultStandardScheme getScheme() {
        return new GetSessionWithCheckBrowser_resultStandardScheme();
      }
    }

    private static class GetSessionWithCheckBrowser_resultStandardScheme extends StandardScheme<GetSessionWithCheckBrowser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSessionWithCheckBrowser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SessionResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSessionWithCheckBrowser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSessionWithCheckBrowser_resultTupleSchemeFactory implements SchemeFactory {
      public GetSessionWithCheckBrowser_resultTupleScheme getScheme() {
        return new GetSessionWithCheckBrowser_resultTupleScheme();
      }
    }

    private static class GetSessionWithCheckBrowser_resultTupleScheme extends TupleScheme<GetSessionWithCheckBrowser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckBrowser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSessionWithCheckBrowser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new SessionResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
